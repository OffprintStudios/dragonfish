name: Deploy Server (DO)

on:
  workflow_run:
    workflows: ["Build Server (DO)"]
    branches: [ main ]
    types:
      - completed

jobs:
  deploy_to_test:
    name: "Deploy to Test environment"
    environment: 'dragonfish-test'
    runs-on: ubuntu-latest
    env:
      SSH_USER: 'dragonfish-cd'

    steps:

    # Need to use this custom action, because the default GitHub download-artifact doesn't allow sharing of artifacts between workflows
    - name: Download dist.tar.gz
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: digiocean-build-server.yml
        workflow_conclusion: success
        name: backend_artifact
        commit: ${{ github.event.workflow_run.head_sha }}

    # We do this at the beginning in case some previous run failed. We don't want to work with a dirty deployment environment.
    - name: 'Remote: Clear deploy cache folder'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          rm -rf /opt/dragonfish/backend-deploy-cache/*
          mkdir -p /opt/dragonfish/backend-deploy-cache

    - name: Upload deployment artifacts to server
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
      run: |
        # Write key out to a file, so we can use it via rsync's 'ssh' invocation
        echo "$SSH_KEY" >> key.txt
        chmod 400 key.txt
        rsync -e "ssh -o StrictHostKeyChecking=no -i key.txt" dist.tar.gz $SSH_USER@${{ secrets.TEST_SERVER_IP }}:/opt/dragonfish/backend-deploy-cache
        rm key.txt

    - name: 'Remote: Extract dist.tar.gz'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: tar -xzf /opt/dragonfish/backend-deploy-cache/dist.tar.gz --directory /opt/dragonfish/backend-deploy-cache

    - name: 'Remote: Create .env file'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_ACCESS_KEY=${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_ENDPOINT=${{ secrets.DIGITALOCEAN_SPACES_ENDPOINT }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_NAME=${{ secrets.DIGITALOCEAN_SPACES_NAME }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_SECRET=${{ secrets.DIGITALOCEAN_SPACES_SECRET }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo IMAGES_HOSTNAME=${{ secrets.IMAGES_HOSTNAME }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          # This next one needs quotes, because the URL has some characters that shells like to do funny things with
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "SUPPORT_ADDRESS=${{ secrets.SUPPORT_ADDRESS }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "INVITE_CODE_TEMPLATE=${{ secrets.INVITE_CODE_TEMPLATE }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "RESET_PASSWORD_TEMPLATE=${{ secrets.RESET_PASSWORD_TEMPLATE }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "CONFIRM_EMAIL_TEMPLATE=${{ secrets.CONFIRM_EMAIL_TEMPLATE }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "REDIS_HOST"=${{ secrets.REDIS_HOST }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "REDIS_PORT"=${{ secrets.REDIS_PORT }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env

    - name: 'Remote: Copy files to new release directory'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          mkdir -p /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }}
          # Using rsync here for easier recursive copy & overwriting at destination
          rsync --archive --remove-source-files /opt/dragonfish/backend-deploy-cache/node_modules/ /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }}/node_modules
          rsync --archive --remove-source-files /opt/dragonfish/backend-deploy-cache/dist/apps/api/ /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }}

    - name: 'Remote: Clear deploy cache folder (again)'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: rm -rf /opt/dragonfish/backend-deploy-cache/*

    - name: 'Remote: Move server symlink to new release'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          rm /opt/dragonfish/current_server
          ln -s /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }} /opt/dragonfish/current_server

    - name: 'Remote: Fix up frontend symlinks'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          if find /opt/dragonfish/releases/client -mindepth 1 | read; then
            latest_client_folder=`ls /opt/dragonfish/releases/client/ | sort -t '-' -k2,2nr | head -1`
            rm -f /opt/dragonfish/current_server/static
            ln -s /opt/dragonfish/releases/client/$latest_client_folder /opt/dragonfish/current_server/static
          else
            echo "No frontend has been deployed yet. No symlink to re-point. Terminating..."
          fi

      # Note: We run PM2 via NVM here, and manually set the NODE_VERSION. We have to do this because we installed Node
      # and PM2 via NVM, and NVM is basically only set up to work in an interactive environment. Since we're NOT
      # in an interactive environment, we need to explicitly invoke NVM and tell it which Node version to use
      # and what command to run.
    - name: 'Remote: Restart PM2'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: NODE_VERSION=15.5.1 ~/.nvm/nvm-exec pm2 start /opt/dragonfish/server_config/pm2.config.js

    - name: 'Remote: Delete oldest release(s)'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.TEST_SERVER_IP }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
            cd /opt/dragonfish/releases/server
            shopt -s nullglob
            echo "Collecting all folders into an array sorted reverse chronologically by release number..."
            folders=(*)
            folders2=($(for folder in "${folders[@]}"; do echo $folder; done | sort -t '-' -k2,2nr))

            echo "Deleting oldest indices..."
            for ((i = 0; i < ${#folders2[@]}; ++i))
            do
                if [ $i -gt 4 ]; then
                    echo "Deleting index $i..."
                    rm -rf ${folders2[$i]}
                    echo "Success!"
                else
                    echo "Skipping index $i..."
                fi
            done

            echo "Done!"
            shopt -u nullglob

# Production deployment steps
  deploy_to_prod:
    name: "Deploy to Production environment"
    runs-on: ubuntu-latest
    needs: deploy_to_test
    environment: dragonfish-prod
    env:
      SSH_USER: 'dragonfish-cd'

    steps:
     # Need to use this custom action, because the default GitHub download-artifact doesn't allow sharing of artifacts between workflows
    - name: Download dist.tar.gz
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: digiocean-build-server.yml
        workflow_conclusion: success
        name: backend_artifact
        commit: ${{ github.event.workflow_run.head_sha }}

    # We do this at the beginning in case some previous run failed. We don't want to work with a dirty deployment environment.
    - name: 'Remote: Clear deploy cache folder'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          rm -rf /opt/dragonfish/backend-deploy-cache/*
          mkdir -p /opt/dragonfish/backend-deploy-cache

    - name: Upload deployment artifacts to server
      env:
        SSH_KEY: ${{ secrets.SSH_KEY }}
      run: |
        # Write key out to a file, so we can use it via rsync's 'ssh' invocation
        echo "$SSH_KEY" >> key.txt
        chmod 400 key.txt
        rsync -e "ssh -o StrictHostKeyChecking=no -i key.txt" dist.tar.gz $SSH_USER@${{ secrets.PROD_IP_1 }}:/opt/dragonfish/backend-deploy-cache
        rm key.txt

    - name: 'Remote: Extract dist.tar.gz'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: tar -xzf /opt/dragonfish/backend-deploy-cache/dist.tar.gz --directory /opt/dragonfish/backend-deploy-cache

    - name: 'Remote: Create .env file'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_ACCESS_KEY=${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_ENDPOINT=${{ secrets.DIGITALOCEAN_SPACES_ENDPOINT }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_NAME=${{ secrets.DIGITALOCEAN_SPACES_NAME }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo DIGITALOCEAN_SPACES_SECRET=${{ secrets.DIGITALOCEAN_SPACES_SECRET }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo IMAGES_HOSTNAME=${{ secrets.IMAGES_HOSTNAME }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          # This next one needs quotes, because the URL has some characters that shells like to do funny things with
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "SUPPORT_ADDRESS=${{ secrets.SUPPORT_ADDRESS }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "INVITE_CODE_TEMPLATE=${{ secrets.INVITE_CODE_TEMPLATE }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "RESET_PASSWORD_TEMPLATE=${{ secrets.RESET_PASSWORD_TEMPLATE }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "CONFIRM_EMAIL_TEMPLATE=${{ secrets.CONFIRM_EMAIL_TEMPLATE }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "REDIS_HOST"=${{ secrets.REDIS_HOST }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "REDIS_PORT"=${{ secrets.REDIS_PORT }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "REDIS_USER"=${{ secrets.REDIS_USER }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env
          echo "REDIS_PASSWORD"=${{ secrets.REDIS_PASSWORD }}" >> /opt/dragonfish/backend-deploy-cache/dist/apps/api/.env

    - name: 'Remote: Copy files to new release directory'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          mkdir -p /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }}
          # Using rsync here for easier recursive copy & overwriting at destination
          rsync --archive --remove-source-files /opt/dragonfish/backend-deploy-cache/node_modules/ /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }}/node_modules
          rsync --archive --remove-source-files /opt/dragonfish/backend-deploy-cache/dist/apps/api/ /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }}

    - name: 'Remote: Clear deploy cache folder (again)'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: rm -rf /opt/dragonfish/backend-deploy-cache/*

    - name: 'Remote: Move server symlink to new release'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          rm /opt/dragonfish/current_server
          ln -s /opt/dragonfish/releases/server/release-${{ github.run_number }}-${{ github.event.workflow_run.head_sha  }} /opt/dragonfish/current_server

    - name: 'Remote: Fix up frontend symlinks'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
          if find /opt/dragonfish/releases/client -mindepth 1 | read; then
            latest_client_folder=`ls /opt/dragonfish/releases/client/ | sort -t '-' -k2,2nr | head -1`
            rm -f /opt/dragonfish/current_server/static
            ln -s /opt/dragonfish/releases/client/$latest_client_folder /opt/dragonfish/current_server/static
          else
            echo "No frontend has been deployed yet. No symlink to re-point. Terminating..."
          fi

      # Note: We run PM2 via NVM here, and manually set the NODE_VERSION. We have to do this because we installed Node
      # and PM2 via NVM, and NVM is basically only set up to work in an interactive environment. Since we're NOT
      # in an interactive environment, we need to explicitly invoke NVM and tell it which Node version to use
      # and what command to run.
    - name: 'Remote: Restart PM2'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: NODE_VERSION=15.5.1 ~/.nvm/nvm-exec pm2 start /opt/dragonfish/server_config/pm2.config.js

    - name: 'Remote: Delete oldest release(s)'
      uses: garygrossgarten/github-action-ssh@release
      with:
        host: ${{ secrets.PROD_IP_1 }}
        username: 'dragonfish-cd'
        privateKey: ${{ secrets.SSH_KEY }}
        command: |
            cd /opt/dragonfish/releases/server
            shopt -s nullglob
            echo "Collecting all folders into an array sorted reverse chronologically by release number..."
            folders=(*)
            folders2=($(for folder in "${folders[@]}"; do echo $folder; done | sort -t '-' -k2,2nr))

            echo "Deleting oldest indices..."
            for ((i = 0; i < ${#folders2[@]}; ++i))
            do
                if [ $i -gt 4 ]; then
                    echo "Deleting index $i..."
                    rm -rf ${folders2[$i]}
                    echo "Success!"
                else
                    echo "Skipping index $i..."
                fi
            done

            echo "Done!"
            shopt -u nullglob





