# This is a basic workflow to help you get started with Actions

name: "Provision Droplet"

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      do_image:
        description: "The Digital Ocean VM image to use when creating the VM. Valid values include: ubuntu-20-04-x64, ubuntu-18-04-x64, or ubuntu-20-10-x64. See Digital Ocean for more."
        required: true
        default: "ubuntu-20-04-x64"
      do_region:
        description: "The Digital Ocean region to deploy the droplet in. Valid values: sfo3, nyc1, nyc3, ams3, fra1, lon1, tor1"
        required: true
        default: "sfo3"
      do_size:
        description: "The Digital Ocean VM profile to provision the virtual machine with. Valid values include: s-1vcpu-1gb, s-1vcpu-2gb, s-2vcpu-2gb, s-2vcpu-4gb"
        required: true
        default: "s-1vcpu-1gb"
      droplet_name:
        description: "The name to give the new droplet!"
        required: true
        default: "new-droplet"
      hostname:
        description: "If set, the hostname the reverse proxy will use. If unset, it will use the new droplet's IP address."
        required: false
        default: ""


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: "GitHub Action for DigitalOcean - doctl"
        uses: digitalocean/action-doctl@v2.1.0
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN  }}

      - name: "Create droplet"
        run: >
          # Create a droplet and embed the SSH keys for dragonfish-cd, Figments' Macbook Air, and PingZing's Offprint key
          doctl compute droplet create ${{ github.event.inputs.droplet_name }}
            --image ${{ github.event.inputs.do_image }}
            --size ${{ github.event.inputs.do_size }}
            --region ${{ github.event.inputs.do_region }}
            --tag-name api
            --enable-backups
            --ssh-keys "29458820,29750484,29750474"
            --enable-monitoring true
            --wait
          # Wait an extra 10 seconds to make sure the SSH daemon is ready
          sleep 10s

      - name: "Store new droplet's IP address"
        run: |
          droplet_name=${{ github.event.inputs.droplet_name }}
          hostIP=$(doctl compute droplet get $droplet_name --format "PublicIPv4" | sed -n 2p)
          echo "droplet_host=$hostIP" >> $GITHUB_ENV

      - name: "Upload provisioning script, pm2.config.js, and Caddyfile"
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          # Write key out to a file, so we can use it via rsync's 'ssh' invocation
          echo "$SSH_KEY" >> key.txt
          chmod 400 key.txt
          rsync -e "ssh -o StrictHostKeyChecking=no -i key.txt" deploy/provision.sh root@${{ env.droplet_host }}:/root/
          rsync -e "ssh -o StrictHostKeyChecking=no -i key.txt" deploy/pm2.config.js root@${{ env.droplet_host }}:/root/
          rsync -e "ssh -o StrictHostKeyChecking=no -i key.txt" deploy/Caddyfile root@${{ env.droplet_host }}:/root/
          rm key.txt

      - name: "Remote: Upload PM2 config and run provisioning script"
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ env.droplet_host }}
          username: 'root'
          privateKey: ${{ secrets.SSH_KEY }}
          command: |
            hostname=${{ github.event.inputs.hostname }}
            mkdir -p /opt/dragonfish/server_config
            cp /root/pm2.config.js /opt/dragonfish/server_config/pm2.config.js

            if [[ -n $hostname ]]; then
              . /root/provision.sh ${{ github.event.inputs.hostname }}
            else
              . /root/provision.sh ${{ env.droplet_host }}
            fi

      - name: "Remote: Install NVM as dragonfish-cd"
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ env.droplet_host }}
          username: 'dragonfish-cd'
          privateKey: ${{ secrets.SSH_KEY }}
          command: |
            # Install NPM and Node via NVM
            curl -s -S https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 15.5.1
            nvm use 15.5.1
            npm install pm2@4.5.4 -g

      - name: "Remote: Daemonize PM2 as root"
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ env.droplet_host }}
          username: 'root'
          privateKey: ${{ secrets.SSH_KEY }}
          command: env PATH=$PATH:/home/dragonfish-cd/.nvm/versions/node/v15.5.1/bin pm2 startup systemd -u dragonfish-cd --hp /home/dragonfish-cd

      - name: "Remote: Remove artifacts and remove dragonfish-cd from root's authorized_keys"
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ env.droplet_host }}
          username: 'root'
          privateKey: ${{ secrets.SSH_KEY }}
          command: |
            if test -f /root/.ssh/authorized_keys; then
              if grep -v "AAAAB3NzaC1yc2EAAAADAQABAAABgQDEaaKz08Z43X+3/aP5kZmptdid2r722yALbC8NsEwZVL1JjhVCGnGECnXQ515PCNOb29XIVcXp0DwscLaUlh7miOQv9s1te9UvFWLPnVx1Lp7+DiyrHJXYkp9eqYHgnwOIltHfbO4VxNWrgsp9n7OxJe2HWeJk4XCENkR8GyPd+6xWraW5VZj7uFyb22dt5RvZsBIQF2+C2d81jtGP1I8DRf9kbreqs3Q8ypSE4GSpNsi9HXxAjQTzQJ2l8Vn1L+/QWXQ0ET8M4DMNH2m9BoNQUdZ/5PujsCX3KXflFl4G/2FRZYbOkhrdE8Deo63MlVtf6UwDrg+W+2bcsiLeJ21NaXPsQhPGTVQ98tSr11YBFee4rVVJmKRGLQ4pWeKO56Ojgc9oXBHFnFspo4ptBPUJOIuR54KWWJMkNeHOY44CDAowbjytSNFvHZ2TVZyWuBzCTjbn3ARZsHdxGlTBL+lfwq31+nzuEk1K816WJ/j2osODzN0PQ4aklxUw129kKiU=" /root/.ssh/authorized_keys > /root/.ssh/tmp; then
                cat /root/.ssh/tmp > /root/.ssh/authorized_keys && rm /root/.ssh/tmp;
              else
                rm /root/.ssh/authorized_keys && rm /root/.ssh/tmp
              fi
            fi
            rm /root/provision.sh
            rm /root/pm2.config.js
            rm /root/Caddyfile
